#!/usr/bin/env python
# Android Device Testing Framework ("dtf")
# Copyright 2013-2015 Jake Valletta (@jake_valletta)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""platform.xml diffing support"""

import dtf.logging as log
import dtf.properties as prop
from dtf.globals import DTF_PACKAGES_DIR
from dtf.module import Module

import AppDb

import sqlite3
from argparse import ArgumentParser
from lxml import etree
from os.path import isfile

TAG = 'platformdiff'
SYSAPP_DB_NAME = 'sysapps.db'
PLATFORM_XML_NAME = 'platform.xml'


class platformdiff(Module):

    """Module class for diffing platform.xml"""

    about = 'Parse the /system/etc/permissions/platform.xml file.'
    author = 'Jake Valletta (jakev)'
    health = 'beta'
    name = 'platformdiff'
    version = '1.1'

    @classmethod
    def safe_sqlite3_connect(cls, db_file_name):

        """Check if DB exists before opening"""

        if isfile(db_file_name):
            return sqlite3.connect(db_file_name)

        else:
            raise IOError("Target Sqlite3 file not found!")

    @classmethod
    def safe_open_xml(cls, xml_name):

        """Try to parse XML file"""

        try:
            f_handle = open(xml_name)
        except IOError:
            return -1

        root = etree.XML(f_handle.read())

        f_handle.close()

        return root

    @classmethod
    def get_protection_level(cls, db_handle, permission_name):

        """Resolve permission manually"""

        cursor = db_handle.cursor()

        sql = ('SELECT p.protection_level '
               'FROM permissions p '
               'WHERE p.name="%s" '
               'LIMIT 1' % (permission_name))

        cursor.execute(sql)

        try:
            return cursor.fetchone()[0]
        except TypeError:
            return "????"

    @classmethod
    def parse_xml(cls, root):

        """Parse the supplied XML"""

        group_mappings = {}
        account_perms = {}

        # First lets do the mapping
        for element in root.findall(".//permission"):

            permission_name = element.attrib['name']

            for group in element.xpath("group"):

                gid_name = group.attrib['gid']

                if permission_name not in group_mappings:
                    group_mappings[permission_name] = list()

                group_mappings[permission_name].append(gid_name)

        # Now the permission assigns
        for element in root.findall(".//assign-permission"):

            permission_name = element.attrib['name']

            uid = element.attrib['uid']

            if uid in account_perms.keys():
                account_perms[uid].append(permission_name)
            else:
                account_perms[uid] = [permission_name]


        return group_mappings, account_perms

    @classmethod
    def determine_diff_platform(cls, args):

        """Determine which diffing platform.xml to use"""

        args_diff_dir = args.diff_dir

        # First check if we no arg is set
        if args_diff_dir is None:

            # First check for our argument.
            try:
                prop_diff_dir = prop.get_prop('Local', 'diff-data-dir')
            except prop.PropertyError:
                prop_diff_dir = None

            if prop_diff_dir is not None:
                diff_platform_xml = "%s/permissions/%s" % (prop_diff_dir,
                                                           PLATFORM_XML_NAME)

                if not isfile(diff_platform_xml):
                    log.e(TAG, "Diff file '%s' doesn't exist!" %
                                                 diff_platform_xml)
                    return None
                else:
                    return diff_platform_xml
            # Not set
            else:
                # Make sure that the AOSP_DB actually exists.
                if not AppDb.isAOSPDataInstalled():
                    log.e(TAG, "Missing diffing data for this API!")
                    return None

                diff_platform_xml = ("%s/aosp-data-%s/permissions/%s" %
                                         (DTF_PACKAGES_DIR,
                                          prop.get_prop("Info", "sdk"),
                                          PLATFORM_XML_NAME))

                return diff_platform_xml

        # It is set, use it.
        else:
            diff_platform_xml = ("%s/permissions/%s"
                                    % (args_diff_dir, PLATFORM_XML_NAME))

            if not isfile(diff_platform_xml):
                log.e(TAG, "Diff file '%s' doesn't exist!" %
                                               diff_platform_xml)
                return None
            else:
                return diff_platform_xml

    def do_diff(self, project_db, local_platform_xml, diff_platform_xml):

        """Do the actual diff"""

        local_grp_maps, local_acct_perms = self.parse_xml(local_platform_xml)
        diff_grp_maps, diff_acct_perms = self.parse_xml(diff_platform_xml)

        print "[+] OEM Added mappings:"
        for name, gids in local_grp_maps.iteritems():

            # Name is completely new.
            if name not in diff_grp_maps:

                protection_level = self.get_protection_level(project_db, name)

                for gid in gids:
                    print "\t%s [%s] ---> %s" % (name, protection_level, gid)

            # Name might still be there
            else:
                diff_gids = diff_grp_maps[name]

                protection_level = self.get_protection_level(project_db, name)

                for gid in gids:
                    if gid not in diff_gids:
                        print ("\t%s [%s] ---> %s" %
                                                (name, protection_level, gid))

        print ""
        print "[+] OEM Added <assign-permission> tags:"
        for uid, permissions in local_acct_perms.iteritems():

            if uid not in diff_acct_perms:
                print "\tUser %s [OEM]:" % uid
                for name in local_acct_perms[uid]:
                    protection_level = self.get_protection_level(project_db,
                                                                 name)
                    print "\t\t+%s [%s]" % (name, protection_level)
            else:
                print "\tUser %s:" % uid
                for name in local_acct_perms[uid]:
                    if name not in diff_acct_perms[uid]:
                        protection_level = self.get_protection_level(
                                                            project_db, name)
                        print "\t\t+%s [%s]" % (name, protection_level)

        return 0

    def execute(self, args):

        """Main module executor"""

        parser = ArgumentParser(prog=self.name,
                                description="Parse the 'platform.xml file.")
        parser.add_argument('--diff-dir', metavar="diff_dir", default=None,
                                help='Use the specified diff directory.')

        db_dir = prop.get_prop('Local', 'db-dir')
        try:
            permissions_dir = prop.get_prop('Local', 'permissions-dir')
        except prop.PropertyError:
            log.e(TAG, "Unable to determine permissions directory!")
            return -1

        local_sysappdb_name = "%s/%s/%s" % (prop.TOP, db_dir,
                                            SYSAPP_DB_NAME)
        local_platform_xml_name = "%s/%s/%s" % (prop.TOP, permissions_dir,
                                                PLATFORM_XML_NAME)

        parsed_args = parser.parse_args(args)

        # Try to open local DB first.
        try:
            project_db = self.safe_sqlite3_connect(local_sysappdb_name)
        except IOError:
            log.e(TAG, "Local 'sysapps.db' does not exist!")
            return -1

        # Now try to open our XML files.
        local_platform_xml = self.safe_open_xml(local_platform_xml_name)

        diff_platform_xml_name = self.determine_diff_platform(parsed_args)
        if diff_platform_xml_name is None:
            log.e(TAG, "Error getting diff XML file.")
            return -2

        diff_platform_xml = self.safe_open_xml(diff_platform_xml_name)

        return self.do_diff(project_db, local_platform_xml, diff_platform_xml)
