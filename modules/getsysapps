#!/usr/bin/env bash
# DTF Core Content
# Copyright 2013-2014 Jake Valletta (@jake_valletta)
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#@About: Pull all system applications (and ODEX files) to project directory.
#@Author: Jake Valletta (jakev)
#@Health: stable
#@Version: 1.0

. dtf_log.sh
. dtf_core.sh

create_db()
{
    sql='CREATE TABLE IF NOT EXISTS apps
         (
         id INTEGER PRIMARY KEY AUTOINCREMENT,
         package_name TEXT UNIQUE NOT NULL,
         project_name TEXT NOT NULL,
         install_path TEXT,
         aosp_package INTEGER DEFAULT 0,
         has_native INTEGER DEFAULT 0,
         min_sdk_version INTEGER DEFAULT 0,
         target_sdk_version INTEGER DEFAULT 0,
         permission INTEGER DEFAULT 0,
         debuggable ITEGER,
         successfully_unpacked INTEGER DEFAULT 0
         );'

    sqlite3 ${db_dir}/sysapps.db "${sql}"

    return $?
}

md5sum_package()
{
    adb shell run-as com.dtf.client ${busybox} md5sum $1 |awk '{print $1}' 2>/dev/null
}

# Feel free to modify this
blacklist=(com.mwr.dz com.helloworld com.jakev.dbgintnt com.dtf.client)
db_dir=$(dtf prop get Local db-dir)
busybox=$(dtf prop get Info busybox)

system_dir=system-apps
no_db=0

if [ "$1" = "--nodb" ]; then
    no_db=1
fi

mkdir ${system_dir} 2> /dev/null

adb wait-for-device

if [ $no_db -eq 0 ]; then

    log_i "Creating system application database and pulling applications..."

    create_db
    log_i "DB created return : $?"

fi

i=1
for package in `adb shell pm list packages -f`; do

    package=$(echo $package |sed 's/^package\://g'|sed 's/\r//g')
    package_name=$(echo $package | awk -F\= '{print $1}')
    project_name=$(echo $package | awk -F\= '{print $2}')

    rtn=$(containsElement "${project_name}" "${blacklist[@]}")

    if [ "${rtn}" = "1" ]; then
        log_w "Skipping package \"${project_name}\" due to blacklist."
        continue
    fi
   
    log_i "Doing package \"${package_name}\""
    
    log_d "Running MD5 of package on device..."
    md5_before=$(md5sum_package ${package_name})
    log_d "MD5 Before: ${md5_before}"    

    log_i "Pulling package \"${package_name}\""
    adb pull ${package_name} ${system_dir}/${project_name}.apk  > /dev/null 2>&1

    # Did it fail?
    ret=$?
    if [ "$ret" -ne "0" ]; then
        log_e "Error pulling APK file \"${package_name}\": ${ret}"
        continue
    fi 

    log_d "Running MD5 of package locally..."
    md5_after=$(md5sum ${system_dir}/${project_name}.apk| awk '{print $1}')
    log_d "MD5 After: ${md5_after}"

    if [ "${md5_before}" != "${md5_after}" ]; then
        log_e "MD5 for this package do not match. EXPLODE."
        exit -4
    else
        log_d "MD5 hashes match!"
     fi

    # We need to make sure we grab the ODEX, if it's there too
    log_i "Getting ODEX for this package (if it exists)..."
    
    odex_name=$(echo $package_name | sed 's/apk/odex/g')
    log_i "Checking for \"${odex_name}\"...."

    adb pull ${odex_name} ${system_dir}/${project_name}.odex 2> /dev/null

    if [ $no_db -eq 0 ]; then

        # Finally, insert it into the database
        sqlite3 .dbs/sysapps.db "insert into apps(package_name, project_name) values ('${package_name}','${project_name}');"

        # Did it fail?
        ret=$?
        if [ "$ret" -ne "0" ]; then
            log_e "Error inserting application data for \"${package_name}\" into database: ${ret}"
            continue
        fi
    fi
done

dtf prop set Local system-apps-dir "${system_dir}"

log_i "System application pull completed!"
