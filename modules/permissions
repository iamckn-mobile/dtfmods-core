#!/usr/bin/env python
# DTF Core Content
# Copyright 2013-2015 Jake Valletta (@jake_valletta)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""Permission searching and lookups"""

import dtf.logging as log
import dtf.properties as prop
from dtf.globals import DTF_PACKAGES_DIR
from dtf.module import Module

import os
import os.path

import AppDb

from argparse import ArgumentParser

SYSAPPS_DB_NAME = 'sysapps.db'

TAG = "permissions"

class permissions(Module):

    """Module class for interacting with system applications"""

    about = 'Permissions searching and lookups.'
    author = 'Jake Valletta (jakev)'
    health = 'beta'
    name = 'permissions'
    version = '1.2'

    def usage(self):

        """Usage message"""

        print "Permissions dtf module v%s" % self.version
        print ""
        print "Submodules:"
        print "    appuses      List applications that use a permission."
        print "    diff         Compare permissions to another DB."
        print "    info         Gives information about a permission."
        print "    list         List permission information."
        print "    lookup       Lookup where a permission is used."
        print ""
        return 0

    @classmethod
    def determine_diff_database(cls, args):

        """Determine which diffing sysappdb to use"""

        args_diff_dir = args.diff_dir

        # First check if we no arg is set
        if args_diff_dir is None:

            # First check for our argument.
            try:
                prop_diff_dir = prop.get_prop('Local', 'diff-data-dir')
            except prop.PropertyError:
                prop_diff_dir = None

            if prop_diff_dir is not None:
                diff_sysapps_db = "%s/.dbs/%s" % (prop_diff_dir,
                                                  SYSAPPS_DB_NAME)

                if not os.path.isfile(diff_sysapps_db):
                    log.e(TAG, "Diff DB '%s' doesn't exist!" %
                                                 diff_sysapps_db)
                    return None
                else:
                    return diff_sysapps_db
            # Not set
            else:
                # Make sure that the AOSP_DB actually exists.
                if not AppDb.isAOSPDataInstalled():
                    log.e(TAG, "Missing diffing data for this API!")
                    return None

                diff_sysapps_db = ("%s/aosp-data-%s/.dbs/%s" %
                                         (DTF_PACKAGES_DIR,
                                          prop.get_prop("Info", "sdk"),
                                          SYSAPPS_DB_NAME))

                return diff_sysapps_db

        # It is set, use it.
        else:
            diff_sysapps_db = "%s/.dbs/%s" % (args_diff_dir, SYSAPPS_DB_NAME)

            if not os.path.isfile(diff_sysapps_db):
                log.e(TAG, "Diff DB '%s' doesn't exist!" %
                                               diff_sysapps_db)
                return None
            else:
                return diff_sysapps_db

    @classmethod
    def get_apps_using_permission(cls, appdb, permission):

        """Get apps that request access to a permissions"""

        sql = ('SELECT a.project_name '
               'FROM apps a '
               'JOIN app_uses_permissions aup '
               'ON aup.application_id=a.id '
               "WHERE aup.permission_id=%s "
               'ORDER BY a.project_name' % permission._id)

        cur = appdb.app_db.cursor()

        cur.execute(sql)

        print ("Applications requesting access to '%s'..." %
                (permission))

        for row in cur.fetchall():
            application_name = row[0]
            print "  %s" % application_name

    @classmethod
    def get_components_using_permission(cls, appdb, permission):

        """Get components that use a permission"""

        activity_list = list()
        service_list = list()
        receiver_list = list()
        read_provider_list = list()
        write_provider_list = list()

        for app in appdb.getApps():

            for activity in appdb.getAppActivities(app._id):

                if activity.permission is None: continue

                if activity.permission.name == permission.name:
                    activity_list.append((app.project_name, activity))

            for service in appdb.getAppServices(app._id):

                if service.permission is None: continue

                if service.permission.name == permission.name:
                    service_list.append((app.project_name, service))

            for receiver in appdb.getAppReceivers(app._id):

                if receiver.permission is None: continue

                if receiver.permission.name == permission.name:
                    receiver_list.append((app.project_name, receiver))

            for prov in appdb.getAppProviders(app._id):

                if (prov.permission is None and
                        prov.read_permission is None):
                    read_permission = None
                elif (prov.permission is None and
                        prov.read_permission is not None):
                    read_permission = prov.read_permission
                elif (prov.permission is not None and
                        prov.read_permission is None):
                    read_permission = prov.permission
                elif (prov.permission is not None and
                        prov.read_permission is not None):
                    read_permission = prov.read_permission

                    # Same thing for write_permission.
                if (prov.permission is None and
                        prov.write_permission is None):
                    write_permission = None
                elif (prov.permission is None and
                        prov.write_permission is not None):
                    write_permission = prov.write_permission
                elif (prov.permission is not None and
                        prov.write_permission is None):
                    write_permission = prov.permission
                elif (prov.permission is not None and
                        prov.write_permission is not None):
                    write_permission = prov.write_permission

                if (read_permission is not None and
                        read_permission.name == permission.name):
                    read_provider_list.append((app.project_name, prov))

                if (write_permission is not None and
                        write_permission.name == permission.name):
                    write_provider_list.append((app.project_name, prov))

        print ("Components that require the permission '%s'..." %
                (permission))

        # Show
        print "Activities:"
        for project_name, activity in activity_list:
            print "  %s (%s)" % (activity.name, project_name)
        print "Services:"
        for project_name, service in service_list:
            print "  %s (%s)" % (service.name, project_name)
        print "Receievers:"
        for project_name, receiver in receiver_list:
            print "  %s (%s)" % (receiver.name, project_name)
        print "Providers (readable):"
        for project_name, provider in read_provider_list:
            print "  %s (%s)" % (provider.name, project_name)
        print "Providers (writable):"
        for project_name, provider in write_provider_list:
            print "  %s (%s)" % (provider.name, project_name)

        return 0

    def cmd_appuses(self, args):

        """List apps that use permission"""

        parser = ArgumentParser(prog='permissions appuses',
                            description='List apps that request a permission.')
        parser.add_argument('permission_name', metavar="permission_name",
                            type=str, default=None,
                            help='The permission to check.')

        parsed_args = parser.parse_args(args)

        db_dir = prop.get_prop('Local', 'db-dir')
        local_sysapps_db_name = "%s/%s/%s" % (prop.TOP, db_dir,
                                              SYSAPPS_DB_NAME)

        permission_name = parsed_args.permission_name

        appdb = AppDb.AppDb(local_sysapps_db_name)

        permission = appdb.resolvePermissionByName(permission_name)

        if permission is None:
            log.e(TAG, "Permission '%s' not found!" % permission_name)
            return -1

        return self.get_apps_using_permission(appdb, permission)

    def cmd_diff(self, args):

        """Diff permissions"""

        parser = ArgumentParser(prog='permissions diff',
                        description='Diff permissions against another device.')
        parser.add_argument('--diff-dir', metavar="diff_dir", type=str,
                        default=None, help='Use the specified AOSP database.')

        parsed_args = parser.parse_args(args)

        db_dir = prop.get_prop('Local', 'db-dir')
        local_sysapps_db_name = "%s/%s/%s" % (prop.TOP, db_dir,
                                              SYSAPPS_DB_NAME)

        diff_db = self.determine_diff_database(parsed_args)
        if diff_db is None:
            log.e(TAG, "Unable to determine diff DB!")
            return -1

        log.d(TAG, "Using AOSP DB '%s'" % diff_db)

        local_appdb = AppDb.AppDb(local_sysapps_db_name)
        diff_appdb = AppDb.AppDb(diff_db)

        local_permissions = local_appdb.getPermissions()
        diff_permission_names = [x.name for x in diff_appdb.getPermissions()]

        for local_permission in local_permissions:

            name = local_permission.name

            if name in diff_permission_names:
                continue

            app_id = local_permission.application_id
            app = local_appdb.getAppById(app_id)

            protection_level = local_permission.protection_level
            project_name = app.project_name
            package_name = app.package_name

            print "%s|%s|%s (%s)" % (name, protection_level,
                                     project_name, package_name)
        return 0

    def cmd_info(self, args):

        """Get information for a given permission"""

        parser = ArgumentParser(prog='permissions info',
                            description='List info for an application.')
        parser.add_argument('permission_name', metavar="permission_name",
                            type=str, default=None,
                            help='The permission to check.')

        parsed_args = parser.parse_args(args)

        db_dir = prop.get_prop('Local', 'db-dir')
        local_sysapps_db_name = "%s/%s/%s" % (prop.TOP, db_dir,
                                              SYSAPPS_DB_NAME)

        permission_name = parsed_args.permission_name

        appdb = AppDb.AppDb(local_sysapps_db_name, safe=True)

        permission = appdb.resolvePermissionByName(permission_name)

        if permission is None:
            log.e(TAG, "Permission '%s' not found!" % permission_name)
            return -1

        app = appdb.getAppById(permission.application_id)

        project_name = app.project_name
        package_name = app.package_name

        print "Permission: %s" % str(permission)
        print "Defined by: %s (%s)" % (project_name, package_name)
        print ""

        return 0

    @classmethod
    def cmd_list(cls):

        """List permissions"""

        db_dir = prop.get_prop('Local', 'db-dir')
        local_sysapps_db_name = "%s/%s/%s" % (prop.TOP, db_dir,
                                              SYSAPPS_DB_NAME)

        appdb = AppDb.AppDb(local_sysapps_db_name)

        for permission in appdb.getPermissions():

            app_id = permission.application_id
            app = appdb.getAppById(app_id)

            name = permission.name
            protection_level = permission.protection_level
            project_name = app.project_name
            package_name = app.package_name

            print "%s|%s|%s (%s)" % (name, protection_level,
                                     project_name, package_name)
        return 0

    def cmd_lookup(self, args):

        """Lookup a permission"""

        parser = ArgumentParser(prog='permissions lookup',
                       description='List components protected by a permission.')
        parser.add_argument('permission_name', metavar="permission_name",
                       type=str, default=None,
                       help='The permission to check.')

        parsed_args = parser.parse_args(args)

        db_dir = prop.get_prop('Local', 'db-dir')
        local_sysapps_db_name = "%s/%s/%s" % (prop.TOP, db_dir,
                                              SYSAPPS_DB_NAME)

        permission_name = parsed_args.permission_name

        appdb = AppDb.AppDb(local_sysapps_db_name)

        permission = appdb.resolvePermissionByName(permission_name)
        if permission is None:
            log.e(TAG, "Permission '%s' not found!" % permission_name)
            return -1

        return self.get_components_using_permission(appdb, permission)

    def execute(self, args):

        """Main class executor"""

        if len(args) == 0:
            return self.usage()
        mode = args.pop(0)

        if mode == 'appuses':
            return self.cmd_appuses(args)
        elif mode == 'diff':
            return self.cmd_diff(args)
        elif mode == "info":
            return self.cmd_info(args)
        elif mode == 'list':
            return self.cmd_list()
        elif mode == "lookup":
            return self.cmd_lookup(args)
        else:
            return self.usage()
