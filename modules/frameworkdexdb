#!/usr/bin/env python
# DTF Core Content
# Copyright 2013-2015 Jake Valletta (@jake_valletta)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Generate DEX Databases
from argparse import ArgumentParser
from os import mkdir
from os.path import isdir, isfile
from pydtf import dtfconfig
from pydtf.dtfcore import launch_binary
from pydtf.dtfglobals import DTF_PACKAGES
from pydtf import dtflog as log
from sys import argv, exit

import FrameworkDb

import sqlite3

__VERSION__ = "1.3"

# dtf Python Module declaration
dtf_module = {"About" : "Create dexdb for a framework file or all frameworks.",
              "Author" : "Jake Valletta (jakev)",
              "Health" : "stable",
              "Version" : __VERSION__}

AOSP_DB = ''
FW_DEX_DBS_DIR = ''
PROJECT_DB = ''

log.LOG_LEVEL_STDOUT = 5

TAG = "frameworkdexdb"

def usage():
    print "FrameworkDexDb dtf Module Version %s" % __VERSION__
    print ""
    print "Submodules:"
    print "    create       Create DEX db for AOSP framework(s)."
    print "    diff         Diff the DEX for AOSP framework(s)."
    print ""
    exit(0)

# Lookup the property associated with AOSP Databases
def getAospDataDirProp():
    try:
        return dtfconfig.get_prop("Local", "aosp-data-dir")
    except:
        return None

def runDiff(local_dex_db, aosp_dex_db):
    out, err, rtn = launch_binary("dexdiff.py", "%s %s" % (local_dex_db,
                                                                   aosp_dex_db))
    # Hack
    print "\n".join(out)
    return rtn

class FrameworkDexDb(object):

    def __init__(self):

        self.local_fwdb = FrameworkDb.FrameworkDb("%s/%s" %
                                (dtfconfig.get_prop("Local", "db-dir"), "frameworks.db"))
        self.aosp_fwdb = None
        self.sdk = dtfconfig.get_prop("Info", "sdk")
        self.framework_dir =  dtfconfig.get_prop("Local", "framework-dir")
        self.fwdex_dir = ("%s/frameworkdexdbs" %
                                    dtfconfig.get_prop("Local", "db-dir"))

    def processFramework(self, in_file, out_file):
 
        if not isfile(in_file):
            print "[ERROR] framework file '%s' does not exist." % in_file
            return -1

        out, err, rtn = launch_binary("dexdumpsql.jar", "-i %s -o %s -a %s" % (in_file, out_file, self.sdk), launcher="java -jar")
        log.d(TAG, "Processing completed : %d" % rtn)
        return rtn

    def processFrameworks(self, fw_list):

        rtn = 0

        if not isdir(self.fwdex_dir):
            mkdir(self.fwdex_dir)

        for fw in fw_list:
            log.i(TAG, "Processing '%s'..." % fw)

            base_name = fw.replace(".jar", '')
 
            vm_type = dtfconfig.get_prop("Info", "vmtype")

            odex_name = "%s/%s.odex" % (self.framework_dir, base_name)
            jar_name = "%s/%s.jar" % (self.framework_dir, base_name)
            out_name = "%s/%s.db" % (self.fwdex_dir, base_name)

            if vm_type[:3] == "ART":
                # Need to handle the ELF BS.
                if isfile(odex_name):
                    log.d(TAG, "ART ODEX mode selected.")
                    rtn |= self.processFramework(odex_name, out_name)   
                else:
                    log.w(TAG, "No ODEX file found for package '%s'" % base_name)                    
            elif isfile(odex_name):
                log.d(TAG, "ODEX mode selected.")
                rtn |= self.processFramework(odex_name, out_name)
            else:
                log.d(TAG, "JAR mode selected.")
                rtn |= self.processFramework(jar_name, out_name)

        return rtn

    def getAllFrameworks(self):

        return self.local_fwdb.getFrameworks()

    def getAllAospFrameworks(self):

        local_frameworks = list()
        diff_frameworks = list()
        tmp_frameworks = list()

        local_frameworks = self.local_fwdb.getFrameworks()
        diff_frameworks = self.aosp_fwdb.getFrameworks()

        for lcl in local_frameworks:
            if lcl in diff_frameworks:
                tmp_frameworks.append(lcl)

        return tmp_frameworks

def cmdCreate(args):

    parser = ArgumentParser(prog='frameworkdexdb create',
                    description='Create dexdb for a framework file or all frameworks.')
    parser.add_argument('framework_name', metavar="framework_name", type=str, nargs='*', default=None,
                        help='Process a single framework file.')
    parser.add_argument('--all-aosp', dest='aosp_mode', action='store_const', const=True,
                        default=False, help='Convert all AOSP framework files.')
    parser.add_argument('--all', dest='all_mode', action='store_const', const=True,
                        default=False, help='Convert all framework files.')
    parser.add_argument('--aosp-db', dest='aosp_db', default=None,
                        help='Use the specified AOSP database.')

    args = parser.parse_args()

    fwdexdb = FrameworkDexDb()

    # Is this all mode?
    if args.all_mode:
        log.i(TAG, "Doing all frameworks...")
        return fwdexdb.processFrameworks(fwdexdb.getAllFrameworks())

    # What about only AOSP?
    elif args.aosp_mode:

        # No argument provided, check if sysapp.db exists by property.
        if args.aosp_db == None:
            aosp_data_dir = getAospDataDirProp()

            if aosp_data_dir != None:
                aosp_db = "%s/%s" % (aosp_data_dir, "frameworks.db")
                if not isfile(aosp_db):
                    print "[ERROR] File '%s' not found. Exiting." % aosp_db
                    return -3
            else:
                # The property is not set, use default AOSP_DB.
                if not FrameworkDb.isAOSPDataInstalled():
                    print "[ERROR] AOSP data for this API level is not installed. Please confirm it is!"
                    return -2

                aosp_db = AOSP_DB

        # Argument provided
        else:
            aosp_db = args.aosp_db
            if not isfile(aosp_db):
                print "[ERROR] File '%s' not found. Exiting." % aosp_db
                return -3

        log.d(TAG, "Using AOSP DB '%s'" % aosp_db)

        fwdexdb.aosp_fwdb = FrameworkDb.FrameworkDb(aosp_db)
        log.i(TAG, "Doing all AOSP Frameworks...")
        return fwdexdb.processFrameworks(fwdexdb.getAllAospFrameworks())

    # Single
    elif args.framework_name != []:

        fw = args.framework_name
        return fwdexdb.processFrameworks(fw)

    # ERROR
    else:
        print "[ERROR] You must supply a framework name or --all/--all-aosp."
        return -1

def cmdDiff(args):

    global AOSP_DB
    global FW_DEX_DBS_DIR

    rtn = 0

    parser = ArgumentParser(prog='frameworkdexdb diff',
                            description='Compare the DEX code of framework against AOSP version.')
    parser.add_argument('framework_name', metavar="framework_name", type=str, nargs='?', default=None,
                        help='Diff a single framework.')
    parser.add_argument('--aosp-db', dest='aosp_db', default=None,
                        help='Use the specified AOSP database.')

    args = parser.parse_args()

    framework_name = args.framework_name

    # Do the diffing
    if framework_name == None:
        print "[ERROR] You must supply a framework name!"
        return -3

    # Determine which AOSP DB to use
    # No argument provided
    if args.aosp_db == None:

        aosp_data_dir = getAospDataDirProp()
        if aosp_data_dir != None:
            aosp_db = "%s/frameworkdexdbs/%s.db" % (aosp_data_dir, framework_name)
            if not isfile(aosp_db):
                print "[ERROR] File '%s' not found. Exiting." % aosp_db
                return -3
        else:
            # Make sure that the AOSP_DB actually exists.
            if not AppDb.isAOSPDataInstalled():
                print "[ERROR] AOSP data for this API level is not installed. Please confirm it is!"
                return -2

            aosp_db = "%s/%s.db" % (FW_DEX_DBS_DIR, framework_name)

    # Argument provided
    else:
        aosp_db = args.aosp_db
        if not isfile(aosp_db):
            print "[ERROR] File '%s' not found. Exiting." % aosp_db
            return -3

    log.d(TAG, "Using AOSP app DB '%s'" % aosp_db)

    # Do the diffing
    fw_dex_db = "%s/%s.db" % (FW_DEX_DBS_DIR, framework_name)

    if not isfile(fw_dex_db):
       print "[ERROR] No local DEX DB for framework '%s'" % framework_name
       return -2

    rtn |= runDiff(fw_dex_db, aosp_db)

    # No errors
    return rtn

def main(argv):

    global AOSP_DB
    global FW_DEX_DBS_DIR

    AOSP_DB = "%s/aosp-data-%s/dbs/frameworks.db" % (DTF_PACKAGES,
                                               dtfconfig.get_prop("Info", "sdk"))

    FW_DEX_DBS_DIR = "%s/frameworkdexdbs" % dtfconfig.get_prop("Local", "db-dir")

    # We can pop the program name off
    argv.pop(0)

    # Get the mode
    mode = argv[0]

    if mode == 'create':
        return cmdCreate(argv)
    elif mode == "diff":
        return cmdDiff(argv)
    else:
        return usage()

if __name__ == '__main__':

    if len(argv) < 2:
        exit(usage())
    else:
        exit(main(argv))

