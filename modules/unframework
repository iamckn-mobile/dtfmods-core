#!/usr/bin/env bash
# DTF Core Content
# Copyright 2013-2014 Jake Valletta (@jake_valletta)
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#@About: Unpack all framework files, and unODEX framework files (if present).
#@Author: Jake Valletta (jakev)
#@Health: stable
#@Version: 1.1

. dtf_core.sh
. dtf_log.sh

cd $TOP

framework_dir=$(dtf prop get Local framework-dir)
sdk=$(dtf prop get Info sdk)
vmtype=$(dtf prop get Info vmtype)

unframework_dir=unframework

if [ -d ${unframework_dir} ]; then
    if [ "$1" = "-f" ]; then
        rm -rf ${unframework_dir}
    else
        echo "Unframework dir already exists.  Run with -f to override."
        exit -1
    fi
fi

mkdir ${unframework_dir} 2> /dev/null

if [ -z $framework_dir ]; then
    echo "[ERROR] Framework directory not found. Are you sure it's set?"
    exit -1
fi

log_i "Unpacking all framework files..."

for fwjar in `ls ${framework_dir}/*.jar`; do
 
    fw_name=$(echo ${fwjar} |sed 's/^framework\///' | sed 's/\.jar$//')

    log_i "Unframeworking \"${fwjar}\" to \"${unframework_dir}/${fw_name}\""

    unzip -d ${unframework_dir}/${fw_name} ${fwjar}  2>&1 > /dev/null

    # Check for ODEX, if so, ignore classes.dex
    if [ -f ${framework_dir}/${fw_name}.odex ]; then
        log_i "Found ODEX files for this framework file..."

        dtf_baksmali -a ${sdk} -x -o ${unframework_dir}/${fw_name} -d \
            ${framework_dir} ${framework_dir}/${fw_name}.odex  #2>&1 > /dev/null

        ret=$?
        # Did it break?
        if [ "$ret" -ne "0" ]; then
            log_e "There was an issue unODEX'ing  \"${framework_dir}/${fw_name}.odex\": ${ret}"
        fi

        # Clean up
        log_i "Cleaning up."
        rm -rf ${unframework_dir}/${fw_name}/classes.dex ${unframework_dir}/${fw_name}/META-INF

    # Older OS's may not have ODEX, so use the classes.dex
    elif [ -e ${unframework_dir}/${fw_name}/classes.dex ]; then

        log_i "Found \"classes.dex\". Disassembling..."
        dtf_baksmali -a ${sdk} -o ${unframework_dir}/${fw_name} \
            ${unframework_dir}/${fw_name}/classes.dex  2>&1 > /dev/null

        ret=$?
        # Did it break?
        if [ "$ret" -ne "0" ]; then
            log_e "There was an issue baksmaliing  \"${unframework_dir}/${fw_name}/classes.dex\": ${ret}"
        fi        

        # Clean up
        log_i "Cleaning up."
        rm -rf ${unframework_dir}/${fw_name}/classes.dex ${unframework_dir}/${fw_name}/META-INF
    else
    # No ODEX or classes, weird situation.
        log_w "No ODEX or classes.dex for this framework file!"
    fi
done

# Lollipop uses ART
if [ "$vmtype" = "ART" ]; then
    # First we can extract from each JAR ODEX

    log_i "Extracting ODEX from each JAR file.."

    for oatelf in `ls ${framework_dir}/arm/*.odex`; do
        tmp=${oatelf%.*}
        fwname=${tmp##*/}

        # Extract each DEX
        dtf oatdextract --out-dir ${unframework_dir}/${fwname} $oatelf
        cp ${unframework_dir}/${fwname}/${fwname}.odex ${framework_dir}/              
        # baksmali
        dtf_baksmali -a ${sdk} -o ${unframework_dir}/${fwname}/ ${unframework_dir}/${fwname}/${fwname}.odex
    done

    # Next, we extract the rest from the boot.oat

    log_i "Extracting the remaining ODEX from boot.oat"
    tmp_dir=$(mktemp -d)
    dtf oatdextract --out-dir ${tmp_dir} ${framework_dir}/arm/boot.oat

    for odex in `ls $tmp_dir`; do
        tmp=${odex%.*}                                                        
        fwname=${tmp##*/}

        mkdir ${unframework_dir}/${fwname} 2> /dev/null
        cp ${tmp_dir}/${odex} ${framework_dir}/
        dtf_baksmali -a ${sdk} -o ${unframework_dir}/${fwname}/ ${tmp_dir}/${odex}

    done

    # Clean the tmp dir.
    rm -rf "${tmp_dir}" 2>/dev/null
fi

log_i "Framework unpack complete!"
# Set Properties
dtf prop set Local unframework-dir "${unframework_dir}"
