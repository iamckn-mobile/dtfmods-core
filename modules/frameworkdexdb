#!/usr/bin/env python
# DTF Core Content
# Copyright 2013-2015 Jake Valletta (@jake_valletta)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""Manipulate framework DEX DBs"""

from argparse import ArgumentParser

import os
import os.path

from dtf.globals import DTF_PACKAGES_DIR
from dtf.module import Module
from dtf.packages import launch_binary

import dtf.properties as prop
import dtf.logging as log

import FrameworkDb

FRAMEWORKS_DB_NAME = 'frameworks.db'
FRAMEWORKDEX_DBS_DIR = 'frameworkdexdbs'

TAG = 'frameworkdexdb'

class frameworkdexdb(Module):

    """Module class manipulating framework DEX DBs"""

    about = 'Create and compare framework DEX DBs.'
    author = 'Jake Valletta (jakev)'
    health = 'stable'
    name = 'frameworkdexdb'
    version = '1.3'

    def usage(self):

        """Print usage message"""

        print "FrameworkDexDb dtf Module v%s" % self.version
        print ""
        print "Submodules:"
        print "    create       Create DEX DB for AOSP framework(s)."
        print "    diff         Diff the DEX DB against AOSP framework(s)."
        print ""

        return 0

    @classmethod
    def determine_diff_database(cls, args):

        """Determine which diffing frameworks DB to use"""

        args_diff_dir = args.diff_dir

        # First check if we no arg is set
        if args_diff_dir == None:

            # First check for our argument.
            try:
                prop_diff_dir = prop.get_prop('Local', 'diff-data-dir')
            except prop.PropertyError:
                prop_diff_dir = None

            if prop_diff_dir != None:
                diff_frameworks_db = "%s/.dbs/%s" % (prop_diff_dir,
                                                     FRAMEWORKS_DB_NAME)

                if not os.path.isfile(diff_frameworks_db):
                    log.e(TAG, "Diff DB '%s' doesn't exist!" %
                                                 diff_frameworks_db)
                    return None
                else:
                    return diff_frameworks_db
            # Not set
            else:
                # Make sure that the AOSP_DB actually exists.
                if not FrameworkDb.isAOSPDataInstalled():
                    log.e(TAG, "Missing diffing data for this API!")
                    return None

                diff_frameworks_db = ("%s/aosp-data-%s/.dbs/%s" %
                                         (DTF_PACKAGES_DIR,
                                          prop.get_prop("Info", "sdk"),
                                          FRAMEWORKS_DB_NAME))

                return diff_frameworks_db

        # It is set, use it.
        else:
            diff_frameworks_db = "%s/.dbs/%s" % (args_diff_dir,
                                                FRAMEWORKS_DB_NAME)

            if not os.path.isfile(diff_frameworks_db):
                log.e(TAG, "Diff DB '%s' doesn't exist!" %
                                               diff_frameworks_db)
                return None
            else:
                return diff_frameworks_db

    @classmethod
    def determine_fw_dex_diff_database(cls, args, fw_name):

        """Determine which frameworkdexdb to use"""

        args_diff_dir = args.diff_dir

        # First check if we no arg is set
        if args_diff_dir == None:

            # First check for our argument.
            try:
                prop_diff_dir = prop.get_prop('Local', 'diff-data-dir')
            except prop.PropertyError:
                prop_diff_dir = None

            if prop_diff_dir != None:
                diff_frameworkdex_db = ("%s/.dbs/%s/%s.db"
                                    % (prop_diff_dir, FRAMEWORKDEX_DBS_DIR,
                                       fw_name))

                if not os.path.isfile(diff_frameworkdex_db):
                    log.e(TAG, "Diff DB '%s' doesn't exist!"
                                                    % diff_frameworkdex_db)
                    return None
                else:
                    return diff_frameworkdex_db
            # Not set
            else:
                # Make sure that the AOSP_DB actually exists.
                if not FrameworkDb.isAOSPDataInstalled():
                    log.e(TAG, "Missing diffing data for this API!")
                    return None

                diff_frameworkdex_db = ("%s/aosp-data-%s/.dbs/%s/%s.db"
                                        % (DTF_PACKAGES_DIR,
                                           prop.get_prop("Info", "sdk"),
                                           FRAMEWORKDEX_DBS_DIR,
                                           fw_name))

                if not os.path.isfile(diff_frameworkdex_db):
                    log.e(TAG, "Diff DB '%s' doesn't exist!"
                                % diff_frameworkdex_db)
                    return None
                else:
                    return diff_frameworkdex_db

        # It is set, use it.
        else:
            diff_frameworkdex_db = ("%s/.dbs/%s/%s.db"
                                % (args_diff_dir, FRAMEWORKDEX_DBS_DIR,
                                   fw_name))

            if not os.path.isfile(diff_frameworkdex_db):
                log.e(TAG, "Diff DB '%s' doesn't exist!" %
                                               diff_frameworkdex_db)
                return None
            else:
                return diff_frameworkdex_db

    # Creation related
    def process_framework(self, in_file, out_file):

        """Process our frameworks"""

        if not os.path.isfile(in_file):
            log.e(TAG, "Framework file '%s' does not exist." % in_file)
            return -1

        cmd_args = "-i %s -o %s -a %s" % (in_file, out_file, self.sdk)

        out, err, rtn = launch_binary('dexdumpsql.jar', cmd_args,
                                      launcher="java -jar")
        log.d(TAG, "Processing completed : %d" % rtn)
        return rtn


    def process_frameworks(self, fw_list):

        """Process list of frameworks"""

        rtn = 0

        if not os.path.isdir(self.frameworkdexdbs_dir):
            os.mkdir(self.frameworkdexdbs_dir)

        for framework in fw_list:
            log.i(TAG, "Processing '%s'..." % framework)

            base_name = framework.replace(".jar", '')

            vm_type = prop.get_prop("Info", "vmtype")

            odex_name = "%s/%s.odex" % (self.frameworks_dir, base_name)
            jar_name = "%s/%s.jar" % (self.frameworks_dir, base_name)
            out_name = "%s/%s.db" % (self.frameworkdexdbs_dir, base_name)

            # ART-runtime
            if vm_type[:3] == "ART":
                # Need to handle the ELF BS.
                if os.path.isfile(odex_name):
                    log.d(TAG, "ART ODEX mode selected.")
                    rtn = self.process_framework(odex_name, out_name)
                else:
                    log.w(TAG, "No ODEX file found for package '%s'"
                                                          % base_name)
            # Dalvik run-time
            else:
                # First try the JAR
                if os.path.isfile(jar_name):

                    log.d(TAG, "Trying JAR first...")
                    rtn = self.process_framework(jar_name, out_name)
                    if rtn != 0:
                        # Well, might as well try ODEX.
                        if os.path.isfile(odex_name):
                            log.d(TAG, "Failing to ODEX mode")
                            rtn = self.process_framework(odex_name, out_name)
                # No JAR, go for the ODEX
                elif os.path.isfile(odex_name):
                    log.d(TAG, "ODEX mode selected.")
                    rtn = self.process_framework(odex_name, out_name)
                else:
                    log.e(TAG, "JAR nor ODEX exists!")

        return rtn

    def get_all_frameworks(self):

        """Return list of all frameworks"""

        return self.local_fwdb.getFrameworks()

    def get_all_aosp_frameworks(self):

        """Return list of all AOSP frameworks"""

        local_frameworks = list()
        diff_frameworks = list()
        tmp_frameworks = list()

        local_frameworks = self.local_fwdb.getFrameworks()
        diff_frameworks = self.diff_fwdb.getFrameworks()

        for lcl in local_frameworks:
            if lcl in diff_frameworks:
                tmp_frameworks.append(lcl)

        return tmp_frameworks
    # End creation related

    # Diff related
    @classmethod
    def do_diff(cls, local_dex_db, diff_dex_db):

        """Do actual diffing"""

        cmd_args = "%s %s" % (local_dex_db, diff_dex_db)

        out, err, rtn = launch_binary("dexdiff.py", cmd_args)

        # Hack
        print "\n".join(out)
        return rtn
    # End diff related

    def cmd_create(self, args):

        """Create DEX db(s)"""

        rtn = 0

        parser = ArgumentParser(prog='frameworkdexdb create',
                            description='Create DEX DB for a framework(s).')
        parser.add_argument('framework_name', metavar="framework_name",
                            type=str, nargs='*', default=None,
                            help='Process a single framework.')
        parser.add_argument('--all-aosp', dest='aosp_mode',
                            action='store_const', const=True, default=False,
                            help='Convert all AOSP frameworks.')
        parser.add_argument('--all', dest='all_mode', action='store_const',
                            const=True, default=False,
                            help='Convert all frameworks.')
        parser.add_argument('--diff-dir', dest='diff_dir', default=None,
                            help='Use data in specified dir to diff.')

        parsed_args = parser.parse_args(args)

        db_dir = prop.get_prop('Local', 'db-dir')
        frameworks_dir = prop.get_prop("Local", "framework-dir")
        local_frameworks_db_name = "%s/%s/%s" % (prop.TOP, db_dir,
                                                 FRAMEWORKS_DB_NAME)

        self.local_fwdb = FrameworkDb.FrameworkDb(local_frameworks_db_name,
                                                  safe=True)
        self.diff_fwdb = None

        self.sdk = prop.get_prop("Info", "sdk")
        self.frameworks_dir = "%s/%s" % (prop.TOP, frameworks_dir)
        self.frameworkdexdbs_dir = "%s/%s" % (db_dir, FRAMEWORKDEX_DBS_DIR)

        # Is this all mode?
        if parsed_args.all_mode:
            log.i(TAG, "Doing all frameworks...")
            rtn = self.process_frameworks(self.get_all_frameworks())

        # What about only AOSP?
        elif parsed_args.aosp_mode:

            diff_db = self.determine_diff_database(parsed_args)
            if diff_db is None:
                log.e(TAG, "Unable to determine diff DB!")
                return -2

            log.d(TAG, "Using diff DB: '%s'" % diff_db)

            self.diff_fwdb = FrameworkDb.FrameworkDb(diff_db)
            log.i(TAG, "Doing all AOSP frameworks...")
            rtn = self.process_frameworks(self.get_all_aosp_frameworks())

        # Single
        elif parsed_args.framework_name != None:

            framework = parsed_args.framework_name
            return self.process_frameworks(framework)

        # ERROR
        else:
            log.e(TAG, "Supply a framework name, --all, or --all-aosp.")
            rtn = -1

        return rtn

    def cmd_diff(self, args):

        """Diff DEX db(s)"""

        parser = ArgumentParser(prog='frameworkdexdb diff',
                            description='Compare framework DEX to another.')
        parser.add_argument('framework_name', metavar="framework_name",
                            type=str, default=None,
                            help='Diff a single framework.')
        parser.add_argument('--diff-dir', dest='diff_dir', default=None,
                            help='Diff against data in specified dir.')

        parsed_args = parser.parse_args(args)

        framework_name = parsed_args.framework_name
        db_dir = prop.get_prop('Local', 'db-dir')

        self.frameworkdexdbs_dir = "%s/%s" % (db_dir, FRAMEWORKDEX_DBS_DIR)

        # Determine the frameworkdexdb/*.db to diff against
        diff_fwdex_db = self.determine_fw_dex_diff_database(parsed_args,
                                                              framework_name)
        if diff_fwdex_db is None:
            log.e(TAG, "Unable to determine diff frameworkdex DB!")
            return -2

        log.d(TAG, "Using diff frameworkdex DB: '%s'" % diff_fwdex_db)

        # Make sure the local DEX db exist.
        local_fwdex_db = "%s/%s.db" % (self.frameworkdexdbs_dir,
                                       framework_name)

        if not os.path.isfile(local_fwdex_db):
            log.e(TAG, "No local DEX DB for application '%s'"
                                                    % framework_name)
            return -4

        return self.do_diff(local_fwdex_db, diff_fwdex_db)

    def execute(self, args):

        """Main module execution"""

        if len(args) == 0:
            return self.usage()
        mode = args.pop(0)

        if mode == 'create':
            return self.cmd_create(args)
        elif mode == 'diff':
            return self.cmd_diff(args)
        else:
            return self.usage()
