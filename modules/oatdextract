#!/usr/bin/env python
# DTF Core Content
# Copyright 2013-2015 Jake Valletta (@jake_valletta)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""Extract DEX files from OAT ELF files"""

import struct
from argparse import ArgumentParser
from os import mkdir
from os.path import isdir, isfile

from elftools.common.exceptions import ELFError
from elftools.common.py3compat import  bytes2str
from elftools.elf.elffile import ELFFile
from elftools.elf.dynamic import DynamicSection
from elftools.elf.sections import SymbolTableSection
from elftools.elf.gnuversions import (
    GNUVerSymSection, GNUVerDefSection, GNUVerNeedSection)
from elftools.elf.descriptions import describe_p_type

import dtf.logging as log
from dtf.module import Module

OAT_DATA_SYMBOL = "oatdata"
P_TYPE_PHDR = "PHDR"
MAX_FILE_LOCATION_DATA = 256

TAG = "oatdextract"

# Global helpers
def read_uint32(file_f, offset):

    """Read 32-bit int at offset"""

    file_f.seek(offset)
    return struct.unpack('I', file_f.read(4))[0]

def read_string(file_f, offset, length):

    """Read string of length length at offset"""

    file_f.seek(offset)
    return struct.unpack("%is" % length, file_f.read(length))[0]
# End helpers


class oatdextract(Module):

    """Module class for extracting DEX from ART binaries"""

    about = 'Extract DEX files from an OAT file.'
    author = 'Jake Valletta (jakev)'
    health = 'stable'
    name = 'oatextract'
    version = '1.0'

    def usage(self):

        """Print usage"""

        print "OatDextract dtf Module v%s" % self.version
        print ""
        print "Usage: oatdextract [oat_file]"
        print ""
        return 0

    @classmethod
    def process_oat(cls, args):

        """Perform processing"""

        oat_name = args.oat_file
        out_dir = args.out_dir
        base_name = args.base_name
        samsung_mode = args.samsung_mode

        if not isfile(oat_name):
            log.e(TAG, "File '%s' does not exist!" % oat_name)
            return -1

        with open(oat_name, 'rb') as oat_file:
            try:
                oatfile = OatElf(oat_file, out_dir, base_name, samsung_mode)

                oat_header_start = oatfile.get_oatdata_offset()
                log.d(TAG, "OAT Data offset: %s" % oat_header_start)

                magic = read_string(oat_file, oat_header_start, 4)
                version = int(read_string(oat_file,
                                          oat_header_start + 4,
                                          4).strip('\0'))
                dex_file_count = read_uint32(oat_file, oat_header_start + 20)

                log.d(TAG, "Magic: %s" % repr(magic))
                log.d(TAG, "Version: %d" % version)
                log.d(TAG, "DEX File Count: %d" % dex_file_count)

                # The rest of the OAT header depends on the version
                if version < 64:
                    key_value_store_size = read_uint32(oat_file,
                                                  oat_header_start + 80)
                    start = key_value_store_size + oat_header_start + 84
                else:
                    key_value_store_size = read_uint32(oat_file,
                                                  oat_header_start + 68)
                    start = key_value_store_size + oat_header_start + 72

                log.d(TAG, "Key/Value Size: %i" % key_value_store_size)
                log.d(TAG, "First DEX Header:  0x%4x" % start)

                i = 0
                while i < dex_file_count:
                    start = oatfile.carve_dex_header(oat_header_start, start)
                    if start == -1:
                        log.i(TAG, "DEX carving aborted.")
                        return -1

                    i += 1

            except ELFError as ex:
                log.e(TAG, "ELF error: %s" % ex)
                return -1

        return 0

    def execute(self, args):

        """Main module execution"""

        parser = ArgumentParser(prog='oatdextract',
                            description='Extract DEX files from OAT file.')
        parser.add_argument('oat_file', metavar="oat_file", type=str,
                            default=None,
                            help='The system service to check.')
        parser.add_argument('--out-dir', metavar="out_dir", type=str,
                            default=".",
                            help='Output files to this directory.')
        parser.add_argument('--base-name', metavar="base_name", type=str,
                            default=None,
                            help='Name of output file (appends if multiple)')
        parser.add_argument('--samsung-mode', dest='samsung_mode',
                            action='store_const', const=True,
                            default=False,
                            help="Use Samsung's modified OatDexFile format.")

        parsed_args = parser.parse_args(args)

        return self.process_oat(parsed_args)

class OatElf(object):

    """OAT ELF binary file class"""

    def __init__(self, file_f, out_dir, base_name, samsung_mode):

        """Class initialization"""

        self.file_f = file_f
        self.elffile = ELFFile(file_f)
        self._versioninfo = None
        self.out_dir = out_dir
        self.base_name = base_name
        self.samsung_mode = samsung_mode
        self.i = 0

    def get_oatdata_offset(self):

        """Obtain OAT data offset"""

        return self.get_oat_data_sym() - self.get_base_offset()

    # From: https://github.com/eliben/pyelftools/blob/master/scripts/readelf.py
    def _symbol_version(self, nsym):
        """ Return a dict containing information on the
                   or None if no version information is available
        """
        self._init_versioninfo()

        symbol_version = dict.fromkeys(('index', 'name', 'filename', 'hidden'))

        if (not self._versioninfo['versym'] or
                nsym >= self._versioninfo['versym'].num_symbols()):
            return None

        symbol = self._versioninfo['versym'].get_symbol(nsym)
        index = symbol.entry['ndx']
        if not index in ('VER_NDX_LOCAL', 'VER_NDX_GLOBAL'):
            index = int(index)

            if self._versioninfo['type'] == 'GNU':
                # In GNU versioning mode, the highest bit is used to
                # store wether the symbol is hidden or not
                if index & 0x8000:
                    index &= ~0x8000
                    symbol_version['hidden'] = True

            if (self._versioninfo['verdef'] and
                    index <= self._versioninfo['verdef'].num_versions()):
                _, verdaux_iter = \
                        self._versioninfo['verdef'].get_version(index)
                symbol_version['name'] = next(verdaux_iter).name
            else:
                verneed, vernaux = \
                        self._versioninfo['verneed'].get_version(index)
                symbol_version['name'] = vernaux.name
                symbol_version['filename'] = verneed.name

        symbol_version['index'] = index
        return symbol_version

    # From: https://github.com/eliben/pyelftools/blob/master/scripts/readelf.py
    def _init_versioninfo(self):
        """ Search and initialize informations about version related sections
            and the kind of versioning used (GNU or Solaris).
        """
        if self._versioninfo is not None:
            return

        self._versioninfo = {'versym': None, 'verdef': None,
                             'verneed': None, 'type': None}

        for section in self.elffile.iter_sections():
            if isinstance(section, GNUVerSymSection):
                self._versioninfo['versym'] = section
            elif isinstance(section, GNUVerDefSection):
                self._versioninfo['verdef'] = section
            elif isinstance(section, GNUVerNeedSection):
                self._versioninfo['verneed'] = section
            elif isinstance(section, DynamicSection):
                for tag in section.iter_tags():
                    if tag['d_tag'] == 'DT_VERSYM':
                        self._versioninfo['type'] = 'GNU'
                        break

        if not self._versioninfo['type'] and (
                self._versioninfo['verneed'] or self._versioninfo['verdef']):
            self._versioninfo['type'] = 'Solaris'

    def get_base_offset(self):

        """Get the base offset"""

        if self.elffile.num_segments() == 0:
            log.e(TAG, "Unable to read program header!")
            raise BufferError

        for segment in self.elffile.iter_segments():
            if describe_p_type(segment['p_type']) == P_TYPE_PHDR:

                p_offset = segment['p_offset']
                p_vaddr = segment['p_vaddr']

                return  p_vaddr - p_offset

        log.e(TAG, "Unable to find base address!")
        raise BufferError

    def get_oat_data_sym(self):

        """Get OAT data sym offset"""

        self._init_versioninfo()

        for section in self.elffile.iter_sections():
            if not isinstance(section, SymbolTableSection):
                continue

            if section['sh_entsize'] == 0:
                log.e(TAG, "Could not find any symbol table!")
                return -1

            for nsym, symbol in enumerate(section.iter_symbols()):

                name = bytes2str(symbol.name)
                if name == OAT_DATA_SYMBOL:
                    return symbol['st_value']

    def carve_dex_header(self, oat_start, dex_header_start):

        """Carve out the DEX header"""

        off = dex_header_start

        log.d(TAG, "Parsing OatDexHeader @ 0x%4x" % off)

        dex_file_location_size = read_uint32(self.file_f, off)
        off += 4

        log.d(TAG, "Length of location name string : %i"
                                            % dex_file_location_size)

        dex_file_location_data = read_string(self.file_f, off,
                                            dex_file_location_size)
        off += dex_file_location_size

        # Check to make sure we're starting on the correct offset.
        if len(dex_file_location_data) > MAX_FILE_LOCATION_DATA:

            err_msg = ("Unsually large location name detected, stopping! "
                       "Is this a Samsung ART file?")

            log.e(TAG, err_msg)
            return -1

        log.d(TAG, "Dex file location string : %s" % dex_file_location_data)

        dex_file_location_checksum = read_uint32(self.file_f, off)
        off += 4

        log.d(TAG, "Dex file location checksum : 0x%4x"
                                            % dex_file_location_checksum)

        dex_file_pointer = read_uint32(self.file_f, off)
        off += 4

        log.d(TAG, "Dex file pointer : %i" % dex_file_pointer)

        # beginning of "oatdata" section + offset is the dex file.
        dex_offset = dex_file_pointer + oat_start

        out_file_name = dex_file_location_data.split('/')[-1]

        # Do some renaming.
        if out_file_name[-4:] == ".jar":
            out_file_name = out_file_name[:-4] + ".odex"

        # Weird "file.jar:classes#.dex"
        elif out_file_name[-4:] == ".dex":
            offset = out_file_name[-5]
            out_file_name = ("%s%s.odex"
                    % (out_file_name.split(":")[0][:-4], offset))

        if self.base_name is not None:
            num = self.i if self.i != 0 else ''

            out_file_path = "%s/%s%s.odex" % (self.out_dir, self.base_name, num)
        else:
            out_file_path = "%s/%s" % (self.out_dir, out_file_name)

        # Check if the output file already exists.
        if isfile(out_file_path):
            log.e(TAG, "The output file '%s' already exists! Not saving!" %
                  out_file_path)
            return -1

        log.i(TAG,
            "Carving DEX '%s' to '%s' (0x%4x) @%i" %
            (dex_file_location_data, out_file_path,
             dex_file_location_checksum, dex_offset))

        # Carve the DEX
        self.carve_dex(dex_offset, out_file_path)

        # We still need to finish processing the OatDexHeader

        # Samsung added methods_offsets_, which is uint32_t
        if self.samsung_mode:
            off += 4

        class_defs_size = read_uint32(self.file_f, dex_offset + (96))
        class_offset_size = (class_defs_size * 4)
        off += class_offset_size

        log.d(TAG, "Class defs size: %i" % class_defs_size)
        log.d(TAG, "Class offset size : %i" % class_offset_size)

        # Return offset to next OatDexHeader
        return off


    def carve_dex(self, dex_offset, out_file_path):

        """Carve out a DEX file"""

        dex_size = read_uint32(self.file_f, dex_offset + 32)

        log.d(TAG, "DEX size is: %i" % dex_size)

        if dex_size < 0:
            log.e(TAG, "Unable to get DEX size.")
            raise RuntimeError

        if not isdir(self.out_dir):
            mkdir(self.out_dir)

        with open(out_file_path, 'wb') as out_file:

            self.file_f.seek(dex_offset)
            read_bytes = 0

            while True:
                if read_bytes + 1024 > dex_size:
                    read_size = dex_size - read_bytes
                else:
                    read_size = 1024

                write_bytes = self.file_f.read(read_size)
                read_bytes += read_size

                if write_bytes:
                    out_file.write(write_bytes)
                else:
                    break

        # Keep track of what DEX file we are carving.
        self.i += 1

        return 0
