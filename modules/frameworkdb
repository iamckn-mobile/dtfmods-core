#!/usr/bin/env python
# DTF Core Content
# Copyright 2013-2015 Jake Valletta (@jake_valletta)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""Framework Manipulation"""
from dtf.adb import DtfAdb
from dtf.globals import DTF_PACKAGES_DIR
from dtf.included import baksmali
from dtf.module import Module
from dtf.packages import launch_module
import dtf.logging as log
import dtf.properties as prop

import FrameworkDb

import os
import time

from argparse import ArgumentParser
from os.path import isdir, isfile
from shutil import move, rmtree
from subprocess import Popen, PIPE
from tempfile import mkdtemp

TAG = "frameworkdb"

FRAMEWORKS_DB_NAME = 'frameworks.db'
FRAMEWORKS_DIR = 'framework'
UNFRAMEWORKS_DIR = 'unframework'

class frameworkdb(Module):

    """Module class for framework manipulation"""

    about = 'Framework database manipulation.'
    author = 'Jake Valletta (jakev)'
    health = 'beta'
    name = 'frameworkdb'
    version = '1.2'

    report = None
    reporting = False

    def usage(self):

        """Print usage message"""

        print "FrameworkDb dtf Module v%s" % self.version
        print ""
        print "Submodules:"
        print "    diff         Compare frameworks to another DB."
        print "    list         List framework information."
        print "    oatextract   Extract DEX from OAT files."
        print "    process      Process frameworks to database."
        print "    pull         Pull frameworks from the device."
        print "    unpack       Unpack frameworks."
        print ""

        return 0

    @classmethod
    def determine_diff_database(cls, args):

        """Determine which diffing frameworkdb to use"""

        args_diff_dir = args.diff_dir

        # First check if we no arg is set
        if args_diff_dir is None:

            # First check for our argument.
            try:
                prop_diff_dir = prop.get_prop('Local', 'diff-data-dir')
            except prop.PropertyError:
                prop_diff_dir = None

            if prop_diff_dir is not None:
                diff_frameworks_db = "%s/.dbs/%s" % (prop_diff_dir,
                                                  FRAMEWORKS_DB_NAME)

                if not os.path.isfile(diff_frameworks_db):
                    log.e(TAG, "Diff DB '%s' doesn't exist!" %
                                                 diff_frameworks_db)
                    return None
                else:
                    return diff_frameworks_db
            # Not set
            else:
                # Make sure that the AOSP_DB actually exists.
                if not FrameworkDb.isAOSPDataInstalled():
                    log.e(TAG, "Missing diffing data for this API!")
                    return None

                diff_frameworks_db = ("%s/aosp-data-%s/.dbs/%s" %
                                         (DTF_PACKAGES_DIR,
                                          prop.get_prop("Info", "sdk"),
                                          FRAMEWORKS_DB_NAME))

                return diff_frameworks_db

        # It is set, use it.
        else:
            diff_frameworks_db = "%s/.dbs/%s" % (args_diff_dir,
                                                 FRAMEWORKS_DB_NAME)

            if not os.path.isfile(diff_frameworks_db):
                log.e(TAG, "Diff DB '%s' doesn't exist!" %
                                               diff_frameworks_db)
                return None
            else:
                return diff_frameworks_db

    # File manipulation
    @classmethod
    def rmfile(cls, path):

        """Try to delete file at path"""

        try:
            os.remove(path)
        except OSError as exception:
            log.e(TAG, "Error attempting to delete '%s': %s"
                                            % (path, exception.strerror))
        return 0
    # End other

    # XZ Compression
    @classmethod
    def test_xz(cls):

        """Confirm that xz is installed"""

        cmd = ("command -v xz").split(' ')

        proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)
        proc.wait()

        if proc.returncode == 0:
            return True
        else:
            return False

    @classmethod
    def decompress_xz(cls, file_name):

        """Decompress an xz resource"""

        cmd = ("xz -d %s" % file_name).split(' ')

        proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=False)
        proc.wait()

        return proc.returncode
    # End XZ Compression

    # Zip Stuff
    @classmethod
    def file_in_zip(cls, zip_file, file_name):

        """Determine if file in ZIP"""

        cmd = ("unzip -t %s %s" % (zip_file, file_name)).split(' ')

        p = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=False)
        p.wait()

        if p.returncode == 0:
            return True
        else:
            return False

    @classmethod
    def extract_from_zip_to(cls, zip_file, extract_path, file_name=None):

        """Extract a file from a ZIP"""

        null_f = open(os.devnull, 'w')

        if file_name is None:
            cmd = ("unzip -u %s -d %s" % (zip_file, extract_path)).split(' ')
        else:
            cmd = ("unzip -u %s %s -d %s" %
                    (zip_file, file_name, extract_path)).split(' ')

        proc = Popen(cmd, stdout=null_f, stderr=null_f, shell=False)
        proc.wait()

        null_f.close()

        return proc.returncode
    # End Zip Stuff

    # Unpack related
    def do_unpack_fw(self, fwdb, framework, sdk, frameworks_dir):

        """Do actual unpack"""
        framework_jar = "%s/%s.jar" % (frameworks_dir, framework)
        framework_odex = "%s/%s.odex" % (frameworks_dir, framework)

        out_dir = "%s/%s" % (UNFRAMEWORKS_DIR, framework)
        out_framework_dex = "%s/classes.dex" % out_dir
        out_framework_meta = "%s/META-INF" % out_dir

        # There should be a JAR, but might not be
        if isfile(framework_jar):

            log.d(TAG, "Trying JAR mode")
            # There is a JAR, but is there a 'classs.dex' inside?
            if self.file_in_zip(framework_jar, 'classes.dex'):

                log.d(TAG, "classes.dex found, trying to unpack")
                # Unzip the classes.dex
                if self.extract_from_zip_to(framework_jar, out_dir) != 0:
                    log.e(TAG, "Unable to extact ZIP '%s'" % framework_jar)

                    # Mark Failed
                    if self.reporting:
                        self.report.add_failed(framework)
                # Unzip success, do unpack!
                else:
                    log.d(TAG, "Unpacking DEX framework")
                    out, err, rtn = baksmali("-a %s -o %s %s"
                                             % (sdk, out_dir,
                                                out_framework_dex))
                    # Error
                    if rtn != 0:
                        log.e(TAG, "Error unpacking framework DEX (%d)" % rtn)

                        # Mark failure
                        if self.reporting:
                            self.report.add_failed(framework)
                    # Success!
                    else:
                        fwdb.markUnpacked(framework)
                        rmtree(out_framework_meta, ignore_errors=True)
                        self.rmfile(out_framework_dex)
                        if self.reporting:
                            self.report.add_completed(framework)

            # JAR, no classes.dex, ODEX?
            elif isfile(framework_odex):

                log.d(TAG, "Unpacking ODEX framework")
                out, err, rtn = baksmali("-a %s -x -o %s -d %s %s" %
                            (sdk, out_dir, frameworks_dir, framework_odex))

                # Mark failure
                if rtn != 0:
                    log.e(TAG, "Error unpacking framework ODEX (%d)" % rtn)

                    # Mark Failed
                    if self.reporting:
                        self.report.add_failed(framework)
                # Success!
                else:
                    fwdb.markUnpacked(framework)
                    rmtree(out_framework_meta, ignore_errors=True)
                    if self.reporting:
                        self.report.add_completed(framework)

            # None of the above, another error/continue
            else:
                log.w(TAG, "No ODEX or classes.dex in JAR!")

                # Mark Failed
                fwdb.markUnpacked(framework)
                if self.reporting:
                    self.report.add_completed(framework)

        # Ok, no JAR. How about an ODEX?
        elif isfile(framework_odex):

            log.d(TAG, "Unpacking ODEX framework")
            out, err, rtn = baksmali("-a %s -x -o %s -d %s %s" %
                        (sdk, out_dir, frameworks_dir, framework_odex))

            # Mark failure
            if rtn != 0:
                log.e(TAG, "Error unpacking framework ODEX (%d)" % rtn)

                # Mark Failed
                if self.reporting:
                    self.report.add_failed(framework)
            # Success!
            else:
                fwdb.markUnpacked(framework)
                rmtree(out_framework_meta, ignore_errors=True)
                if self.reporting:
                    self.report.add_completed(framework)

        # Neither
        else:
            log.e(TAG, "No JAR or ODEX!")

            # Mark Failed
            if self.reporting:
                self.report.add_failed(framework)

        return 0

    def do_unpack(self, local_db):

        """Perform the unpack"""

        frameworks_dir = prop.get_prop("Local", "framework-dir")
        sdk = prop.get_prop("Info", "sdk")
        fwdb = FrameworkDb.FrameworkDb(local_db)

        for framework in fwdb.getFrameworks():

            log.i(TAG, "Unframeworking '%s'..." % framework)
            self.do_unpack_fw(fwdb, framework, sdk, frameworks_dir)

        # If reporting is enabled, show it.
        if self.reporting:
            self.report.show_report()

        fwdb.close()

        # Set the property.
        prop.set_prop("Local", "unframework-dir", UNFRAMEWORKS_DIR)

        return 0
    # End unpack related

    # Diff related
    def do_diff(self, local_db, diff_db, bootclasspath=0):

        """Do actual diffing"""

        local_frameworks = list()
        diff_frameworks = list()
        tmp_frameworks = list()

        if bootclasspath == 0:
            local_frameworks = local_db.getFrameworks(bcp_only=True)
            diff_frameworks = diff_db.getFrameworks(bcp_only=True)
        else:
            local_frameworks = local_db.getFrameworks(non_bcp_only=True)
            diff_frameworks = diff_db.getFrameworks(non_bcp_only=True)

        for lcl in local_frameworks:
            if lcl not in diff_frameworks:
                tmp_frameworks.append(lcl)

        return tmp_frameworks

    def cmd_diff(self, args):

        """Perform diffing"""

        db_dir = prop.get_prop('Local', 'db-dir')
        local_frameworks_db_name = "%s/%s/%s" % (prop.TOP, db_dir,
                                              FRAMEWORKS_DB_NAME)

        parser = ArgumentParser(prog='frameworkdb diff',
                            description='List framework information.')
        parser.add_argument('--non-boot', dest='boot', action='store_const',
                            const=False, default=True,
                            help='Print only non-$BOOTCLASSPATH frameworks.')
        parser.add_argument('--boot', dest='non_boot', action='store_const',
                            const=False, default=True,
                            help='Print only $BOOTCLASSPATH frameworks.')
        parser.add_argument('--diff-dir', metavar="diff_dir", type=str,
                            default=None,
                            help='Use the specified database for diffing.')

        parsed_args = parser.parse_args(args)

        non_boot = parsed_args.non_boot
        boot = parsed_args.boot

        diff_db = self.determine_diff_database(parsed_args)

        if diff_db is None:
            log.e(TAG, "Unable to determine diff DB!")
            return -1

        log.d(TAG, "Using diff DB: '%s'" % diff_db)

        # Can't both be negative.
        if not boot and not non_boot:
            log.e(TAG, "You cannot specify both --non-boot and --boot!")
            return -4

        if not isfile(local_frameworks_db_name):
            log.e(TAG, "Framework datebase does not exist, please process it!")
            return -5

        local_fwdb = FrameworkDb.FrameworkDb(local_frameworks_db_name)
        diff_fwdb = FrameworkDb.FrameworkDb(diff_db)

        if boot:

            print "BootClassPath Frameworks:"
            for fw in self.do_diff(local_fwdb, diff_fwdb, bootclasspath=0):
                print "   %s" % fw

        if non_boot:

            print "Non-BootClassPath Frameworks:"
            for fw in self.do_diff(local_fwdb, diff_fwdb, bootclasspath=1):
                print "   %s" % fw

        local_fwdb.close()
        diff_fwdb.close()

        return 0

    def cmd_oatextract(self):

        """Perform OAT extract"""

        samsung_art = False
        vm_type = prop.get_prop("Info", "vmtype")
        if not vm_type[:3] == "ART":
            log.e(TAG, "This is not a ART device, this step is not required.")
            return -1

        frameworks_dir = prop.get_prop("Local", "framework-dir")

        if not isdir(frameworks_dir):
            log.e(TAG, "Framework directory does not exist. Pull first!")
            return -2

        # Is this a Samsung ART device?
        if vm_type == "ART-Samsung":
            log.d(TAG, "Activiting Samsung ART mode")
            samsung_art = True

        # Get the CPU bits.
        cpu_bits = prop.get_prop("Info", "cpu-bits")
        if cpu_bits == "32":
            arm_dir = "%s/arm" % FRAMEWORKS_DIR
        elif cpu_bits == "64":
            arm_dir = "%s/arm64" % FRAMEWORKS_DIR
        else:
            log.e(TAG, "Unable to determin CPU type from config.")
            return -3

        # First, we extract from each ODEX
        # We need to check for both .odex and .odex.xz.
        log.i(TAG, "Looking for XZ compressed ODEX files...")

        for filename in os.listdir(arm_dir):
            if filename[-5:] == ".odex.xz":
                # Decompress with XZ
                rtn = self.decompress_xz(filename)
                if rtn != 0:
                    log.e(TAG, "Error decompressing XZ archive '%s'"
                                                            % (filename))

        log.i(TAG, "Doing DEX extraction from ART ELF files...")
        for filename in os.listdir(arm_dir):
            if filename[-5:] != ".odex":
                continue

            cmd_args = list()

            log.d(TAG, "Extracting framework '%s'" % filename)

            oat_file = "%s/%s" % (arm_dir, filename)
            cmd_args = ['--out-dir', frameworks_dir, oat_file]
            if samsung_art:
                cmd_args.append('--samsung-mode')

            rtn = launch_module("oatdextract", cmd_args)
            if rtn != 0:
                log.e(TAG, "Error extracting DEX from OAT file: %d" % rtn)
                return -3

        # Next, we extract the rest from the boot.oat
        log.i(TAG, "Extracting ODEX from 'boot.oat'...")

        tmp_dir = mkdtemp()
        cmd_args = list()

        boot_oat_file = "%s/arm/boot.oat" % frameworks_dir
        cmd_args += ['--out-dir', tmp_dir, boot_oat_file]
        if samsung_art:
            cmd_args.append('--samsung-mode')

        rtn = launch_module("oatdextract", cmd_args)
        if rtn != 0:
            log.e(TAG, "Error extracting DEX from OAT file: %d" % rtn)
            return -4

        for tmp_odex_name in os.listdir(tmp_dir):

            tmp_odex = "%s/%s" % (tmp_dir, tmp_odex_name)
            move(tmp_odex, frameworks_dir)

        # Clean the tmp dir.
        rmtree(tmp_dir)

        return 0

    def cmd_pull(self):

        """Perform pull"""

        if isdir(FRAMEWORKS_DIR):
            log.e(TAG, "Framework directory exists. Unable to continue.")
            return -1

        # Make output dir
        os.mkdir(FRAMEWORKS_DIR)

        adb = DtfAdb()
        adb.wait_for_device()

        log.i(TAG, "Pulling framework files from device...")
        start = time.time()

        # Do the pulling.
        adb.pull("/system/framework/", local=FRAMEWORKS_DIR)

        log.i(TAG, "Framework pull complete! Elapsed Time: %s" %
                (time.time() - start))

        # Set the property
        prop.set_prop("Local", "framework-dir", FRAMEWORKS_DIR)

        return 0

    def cmd_list(self, args):

        """Perform listing"""

        db_dir = prop.get_prop('Local', 'db-dir')
        local_frameworks_db_name = "%s/%s/%s" % (prop.TOP, db_dir,
                                              FRAMEWORKS_DB_NAME)

        parser = ArgumentParser(prog='frameworkdb list',
                                description='List framework information.')
        parser.add_argument('--non-boot', dest='boot', action='store_const',
                                const=False, default=True,
                                help='Print non-$BOOTCLASSPATH frameworks.')
        parser.add_argument('--boot', dest='non_boot', action='store_const',
                                const=False, default=True,
                                help='Print $BOOTCLASSPATH frameworks.')

        parsed_args = parser.parse_args(args)

        non_boot = parsed_args.non_boot
        boot = parsed_args.boot

        # Can't both be negative.
        if not boot and not non_boot:
            log.e(TAG, "You cannot specify both --non-boot and --boot!")
            return -1

        if not isfile(local_frameworks_db_name):
            log.e(TAG, "Framework datebase does not exist, please process it!")
            return -2

        fwdb = FrameworkDb.FrameworkDb(local_frameworks_db_name)

        if non_boot:
            print "Non-BootClassPath Frameworks:"
            for framework in fwdb.getFrameworks(non_bcp_only=True):

                unpack_status = ""

                if not fwdb.isUnpacked(framework):
                    unpack_status = " [NOT UNPACKED]"

                print "   %s%s" % (framework, unpack_status)

        if boot:
            print "BootClassPath Frameworks:"
            for framework in fwdb.getFrameworks(bcp_only=True):

                unpack_status = ""

                if not fwdb.isUnpacked(framework):
                    unpack_status = " [NOT UNPACKED]"

                print "   %s%s" % (framework, unpack_status)

        fwdb.close()
        return 0

    def cmd_unpack(self, args):

        """Perform unpack"""

        self.report = None
        self.reporting = False
        db_dir = prop.get_prop('Local', 'db-dir')
        local_frameworks_db_name = "%s/%s/%s" % (prop.TOP, db_dir,
                                              FRAMEWORKS_DB_NAME)

        parser = ArgumentParser(prog='frameworkdb unpack',
                            description='Unpack frameworks.')
        parser.add_argument('--report', dest='reporting', action='store_const',
                            const=True, default=False,
                            help='Produce a report that shows unpack status.')

        parsed_args = parser.parse_args(args)

        self.reporting = parsed_args.reporting

        if self.reporting:
            self.report = UnpackReport()

        if not self.test_xz():
            log.e(TAG, "xz is not installed! Please install it.")
            return -1

        if not isfile(local_frameworks_db_name):
            log.e(TAG, "Framework datebase does not exist, please process it!")
            return -2

        if isdir(UNFRAMEWORKS_DIR):
            log.e(TAG, "Unframework directory exists. Unable to continue.")
            return -3

        os.mkdir(UNFRAMEWORKS_DIR)

        return self.do_unpack(local_frameworks_db_name)

    def cmd_process(self):

        """Perform process"""

        db_dir = prop.get_prop('Local', 'db-dir')
        local_frameworks_db_name = "%s/%s/%s" % (prop.TOP, db_dir,
                                              FRAMEWORKS_DB_NAME)

        if isfile(local_frameworks_db_name):
            inpt = raw_input("[WARNING] A framework database already exists.  "
                             "Do you want to recreate the DB? [y/N] ").lower()
            if inpt != 'y':
                print "Exiting."
                return 0

        # Drop database and rebuild.
        fwdb = FrameworkDb.FrameworkDb(local_frameworks_db_name)

        if fwdb.dropTables() != 0:
            log.e(TAG, "Error dropping tables. Exiting.")
            return -1

        if fwdb.createTables() != 0:
            log.e(TAG, "[ERROR] Database creation failed. Exiting")
            return -2

        # For devices without ODEX, we can just list JARs.  For devices WITH
        # ODEX files AND are not ART, there should be more JARs than ODEX, but
        # ART screws it up, and there could potentially be gaps.
        #
        # The solution? Create lists for both JAR + ODEX, unique, and use that.
        # It's a little redundant, but it works!
        frameworks_dir = prop.get_prop("Local", "framework-dir")
        bcp_jars = prop.get_prop("Info", "bootclasspath-jars")

        bcp_jars = bcp_jars.replace('.jar',
                                    '').replace('/system/framework/', '')

        bootclasspath = bcp_jars.split(':')
        framework_list = list()

        log.i(TAG, "Processing framework database...")

        for filename in os.listdir(frameworks_dir):

            if filename[-5:] == ".odex" or filename[-4:] == ".jar":

                cropped = filename.replace('.jar', '').replace('.odex', '')
                if cropped not in [x[0] for x in framework_list]:

                    # Determine if $BCP
                    if cropped in bootclasspath:
                        framework_list.append((cropped, 1))
                    else:
                        framework_list.append((cropped, 0))

        # We have our list. Now we do a bulk insert and commit!
        fwdb.addFrameworks(framework_list)
        fwdb.close()

        return 0

    def execute(self, args):

        """Main class execution"""

        if len(args) == 0:
            return self.usage()
        mode = args.pop(0)

        if mode == 'diff':
            return self.cmd_diff(args)
        elif mode == 'oatextract':
            return self.cmd_oatextract()
        elif mode == "pull":
            return self.cmd_pull()
        elif mode == "list":
            return self.cmd_list(args)
        elif mode == "unpack":
            return self.cmd_unpack(args)
        elif mode == "process":
            return self.cmd_process()
        else:
            return self.usage()

# Reporting Class
class UnpackReport(object):

    """Class for tracking unpack status"""

    def __init__(self):

        """Class initialization"""

        self._completed_frameworks = list()
        self._failed_frameworks = list()

    def add_completed(self, name):

        """Add a completed framework"""

        self._completed_frameworks.append(name)

    def add_failed(self, name):

        """Add a failed framework"""

        self._failed_frameworks.append(name)

    def show_report(self):

        """Generate report"""

        log.i(TAG, "Unpack Report:")
        log.i(TAG, " Successfully Unpacked (%d)" %
                    len(self._completed_frameworks))
        for framework in self._completed_frameworks:
            log.i(TAG, "  %s" % framework)

        log.i(TAG, " Unpack Failed (%d)" %
                    len(self._failed_frameworks))
        for framework in self._failed_frameworks:
            log.i(TAG, "  %s" % framework)
