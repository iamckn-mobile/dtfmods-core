#!/usr/bin/env bash
# DTF Core Content
# Copyright 2013-2014 Jake Valletta (@jake_valletta)
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#@About: Unpack all system applications, and unODEX all ODEX files.
#@Author: Jake Valletta (jakev)
#@Health: stable
#@Version: 1.0

. dtf_core.sh
. dtf_log.sh

LOG_LEVEL=5

get_min_sdk()
{
    apk=$1
    default=$2   

    min_sdk=$(aapt d badging ${apk} 2>/dev/null|grep "^sdkVersion" |awk -F\: '{print $2}' | \
       tr -d \')

    if [ -z "$min_sdk" ]; then
        echo $default
    else
        echo $min_sdk
    fi
}

get_target_sdk()
{
    apk=$1
    default=$2   

    target_sdk=$(aapt d badging ${apk} 2>/dev/null|grep "^targetSdkVersion" | \
                 awk -F\: '{print $2}' | tr -d \')

    if [ -z "$target_sdk" ]; then
        echo $default
    else
        echo $target_sdk
    fi
}

unpack_apk()
{   # We try to unpack the APK using 3 different methods. Godspeed.
    log_i "Attempting to unpack..."
 
    unpack_with_fwres
 
    ret=$?
   
    if [ "$ret" -ne "0" ]; then
        log_e "Error unpacking with framework resources, trying again with standard fw resources"
        unpack_with_nofwres
       
        ret=$?

        if [ "$ret" -ne "0" ]; then
            log_e "Erorr unpacking with standard resources, going to try to unzip, parse manifest, and disassemble"
            unpack_manual
            
            ret=$?
            if [ "$ret" -ne "0" ]; then
                log_e "Wow. giving up on this APK."
                return -1
            fi

            return 0

        fi

        return 0
    fi
       
    return 0

}

unpack_with_fwres()
{   # Standard unpack, using the framework resources we grabbed previously.  This SHOULD work for 
    # 95% of all the applications.
 
    # clean up first.
    rm -rf ${out_dir}/* 2>/dev/null
 
    dtf_apktool decode -f --frame-path ${fwres_dir} --frame-tag ${serial} ${apk} ${out_dir}
    ret=$?
  
    return $ret

}

unpack_with_nofwres()
{   # Somtimes the framework resources we force the application to use actually do not work.  We try
    # to let apktool figure it out on its own.

    # Clean up first.
    rm -rf ${out_dir}/* 2>/dev/null

    dtf_apktool decode -f ${apk} ${out_dir}
    ret=$?

    return $ret
}

unpack_manual()
{   # This is a last ditch effort.  Basically just get the AndroidManifest.xml out and disassemble.

    # Clean up first.
    rm -rf ${out_dir}/* 2>/dev/null
    
    dtf_apktool decode -f -r ${apk} ${out_dir}
    mv ${out_dir}/AndroidManifest.xml ${out_dir}/AndroidManifest.xml.encoded
    axmlprinter2 ${out_dir}/AndroidManifest.xml.encoded > ${out_dir}/AndroidManifest.xml

    return 0
}



framework_dir=$(dtf prop get Local framework-dir)
fwres_dir=$(dtf prop get Local fwres-dir)
sdk=$(dtf prop get Info sdk)
serial=$(dtf prop get Info serial)
default_fwres=$(dtf prop get App default-fwres)
system_apps_dir=$(dtf prop get Local system-apps-dir)

decoded_oem_dir=decoded-oem
decoded_aosp_dir=decoded-aosp


if [ -f $framework_dir ]; then
    echo "[ERROR] Framework directory not found. Are you sure it's set?"
    exit -1
fi

if [ -z $sdk ]; then
    echo "[ERROR] SDK level not found. Are you sure it's set?"
    exit -2
fi

IFS=$'\n' oem_packages=($(dtf sysappdiff -q))
unset IFS

log_i "Unpacking system applications..."


for apk in `ls ${system_apps_dir}/*.apk`; do

    package_name=$(aapt d badging ${apk} 2>/dev/null|grep "^package" |awk '{print $2}' | \
        sed 's/^name=//g' |tr -d \')

    rtn=$(containsElement "${package_name}" "${oem_packages[@]}")

    if [ "${rtn}" == "1" ]; then
        out_dir=${decoded_oem_dir}/${package_name} 
        aosp_app=0       
    else
        out_dir=${decoded_aosp_dir}/${package_name}
        aosp_app=1
    fi

    min_sdk_version=$(get_min_sdk ${apk} 1)
    target_sdk_version=$(get_target_sdk ${apk} ${min_sdk_version})

    log_i "=== Doing APK file: \"${apk}\" to \"${out_dir}\""
    unpack_apk

    # Did it fail?
    ret=$?
    if [ "$ret" -ne "0" ]; then
        log_e "There was an issue unpacking! \"${apk}\": ${ret}"
         
        continue
    fi

    # OK, lets handle that ODEX.  First lets see if apktool found and disassembled stuff.
    # If apktool didn't, we need to do some ODEXing.
    if [ ! -d ${out_dir}/smali ]; then
        # Looks like it doesnt exist. OK. Let's try to ODEX
        log_i "No classes.dex created when unpacking with apktool, checking for ODEX..."
        # First lets make sure we can even find an ODEX.  If we can't, this is an issue!
        #ls -l ${system_apps_dir}/${package_name}.odex
        if [ ! -f ${system_apps_dir}/${package_name}.odex ]; then
            log_e "There was no class files in the APK, or a correspond ODEX file. Error?"
        else
            odex=${system_apps_dir}/${package_name}.odex
            log_i "Found ODEX! ODEXing \"${odex}\" to \"${out_dir}\""
            dtf_baksmali -a ${sdk} -x -o ${out_dir}/smali -d ${framework_dir} ${odex} 2>&1 > /dev/null
            # Did it fail?
            ret=$?
            if [ "$ret" -ne "0" ]; then
                log_e "There was an issue unODEXing \"${odex}\": ${ret}"
            fi
        fi
    else
        log_i "We already did the baksmali'ing, no ODEX needed!"
    fi

    # Write the new values to our DB
    echo "sqlite3 .dbs/sysapps.db "UPDATE apps SET install_path=\"${out_dir}\",aosp_package=${aoasp_app}, min_sdk_version=${min_sdk_version}, target_sdk_versison=${target_sdk_version} WHERE project_name=\"${package_name}\"""

    sqlite3 .dbs/sysapps.db "UPDATE apps SET install_path=\"${out_dir}\",aosp_package=${aosp_app}, min_sdk_version=${min_sdk_version}, target_sdk_version=${target_sdk_version} WHERE project_name=\"${package_name}\""

    log_i "sql rtn : $?"

    log_i "====Done with APK: \"${apk}\"====="

done

# Set properties
dtf prop set Local decoded-aosp-dir "${decoded_aosp_dir}"
dtf prop set Local decoded-oem-dir "${decoded_oem_dir}"

log_i "Unpacking complete!"

exit 0
